{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/roblukan/Library/Mobile%20Documents/com~apple~CloudDocs/CS%20Projects/hackmit-2025/timeshifter/app/api/schedule/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { ScheduleBlock, Chronotype } from '../../../lib/types';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { wake, sleep, chronotype, commitments } = body;\n\n    // Parse wake and sleep times\n    const wakeTime = new Date(`2000-01-01T${wake}:00`);\n    const sleepTime = new Date(`2000-01-01T${sleep}:00`);\n    \n    // If sleep time is before wake time, assume it's the next day\n    if (sleepTime <= wakeTime) {\n      sleepTime.setDate(sleepTime.getDate() + 1);\n    }\n\n    // Generate schedule based on chronotype\n    const schedule: ScheduleBlock[] = [];\n\n    // Add commitments first\n    commitments.forEach((commitment: any) => {\n      schedule.push({\n        start: commitment.start,\n        end: commitment.end,\n        label: 'commitment',\n        rationale: `Scheduled commitment: ${commitment.title}`,\n        confidence: 1.0\n      });\n    });\n\n    // Add chronotype-specific schedule blocks\n    if (chronotype === 'morning') {\n      schedule.push(\n        {\n          start: wake,\n          end: formatTime(addMinutes(wakeTime, 30)),\n          label: 'sleep',\n          rationale: 'Morning chronotype - gentle wake-up routine',\n          confidence: 0.9\n        },\n        {\n          start: formatTime(addMinutes(wakeTime, 45)),\n          end: formatTime(addMinutes(wakeTime, 90)),\n          label: 'exercise',\n          rationale: 'Peak energy window for morning chronotypes',\n          confidence: 0.8\n        },\n        {\n          start: formatTime(addMinutes(wakeTime, 120)),\n          end: formatTime(addMinutes(wakeTime, 240)),\n          label: 'focus',\n          rationale: 'High cognitive performance period',\n          confidence: 0.9\n        }\n      );\n    } else if (chronotype === 'evening') {\n      schedule.push(\n        {\n          start: wake,\n          end: formatTime(addMinutes(wakeTime, 60)),\n          label: 'light',\n          rationale: 'Evening chronotype - gradual morning activation',\n          confidence: 0.8\n        },\n        {\n          start: formatTime(addMinutes(wakeTime, 180)),\n          end: formatTime(addMinutes(wakeTime, 240)),\n          label: 'exercise',\n          rationale: 'Late morning exercise for evening chronotypes',\n          confidence: 0.7\n        },\n        {\n          start: formatTime(addMinutes(wakeTime, 360)),\n          end: formatTime(addMinutes(wakeTime, 480)),\n          label: 'focus',\n          rationale: 'Peak cognitive performance in afternoon',\n          confidence: 0.9\n        }\n      );\n    } else { // intermediate\n      schedule.push(\n        {\n          start: wake,\n          end: formatTime(addMinutes(wakeTime, 45)),\n          label: 'sleep',\n          rationale: 'Intermediate chronotype - balanced wake routine',\n          confidence: 0.8\n        },\n        {\n          start: formatTime(addMinutes(wakeTime, 90)),\n          end: formatTime(addMinutes(wakeTime, 150)),\n          label: 'exercise',\n          rationale: 'Optimal morning exercise window',\n          confidence: 0.8\n        },\n        {\n          start: formatTime(addMinutes(wakeTime, 180)),\n          end: formatTime(addMinutes(wakeTime, 300)),\n          label: 'focus',\n          rationale: 'Peak cognitive performance period',\n          confidence: 0.9\n        }\n      );\n    }\n\n    // Add break periods\n    schedule.push(\n      {\n        start: '12:00',\n        end: '13:00',\n        label: 'break',\n        rationale: 'Lunch break - essential for circadian rhythm',\n        confidence: 0.9\n      },\n      {\n        start: '15:30',\n        end: '15:45',\n        label: 'break',\n        rationale: 'Afternoon energy dip - short recovery break',\n        confidence: 0.8\n      }\n    );\n\n    // Sort schedule by start time\n    schedule.sort((a, b) => a.start.localeCompare(b.start));\n\n    return NextResponse.json({ schedule });\n  } catch (error) {\n    console.error('Error generating schedule:', error);\n    return NextResponse.json(\n      { error: 'Failed to generate schedule' },\n      { status: 500 }\n    );\n  }\n}\n\nfunction formatTime(date: Date): string {\n  return date.toTimeString().slice(0, 5);\n}\n\nfunction addMinutes(date: Date, minutes: number): Date {\n  const result = new Date(date);\n  result.setMinutes(result.getMinutes() + minutes);\n  return result;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}